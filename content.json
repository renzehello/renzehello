{"meta":{"title":"RZ","subtitle":"","description":"","author":"黑泽暗","url":"http://renzehello.github.io","root":"/"},"posts":[{"tags":[{"name":"源代码","slug":"源代码","permalink":"http://renzehello.github.io/tags/%E6%BA%90%E4%BB%A3%E7%A0%81/"},{"name":"flink","slug":"flink","permalink":"http://renzehello.github.io/tags/flink/"}],"title":"Flink源码分析（一）：源码环境搭建及模块介绍","date":"2020/01/16","text":"更新至Flink release-1.9.0版本 环境 Java 1.8.0_191 Apache Maven 3.6.1 IntelliJ IDEA 2019.2.1 下载访问Apache Flink Github fork 代码到自己github 克隆代码 1git clone https://github.com/apache/flink.git 切换至 release-1.9 分支： 1git checkout release-1.9 编译 修改maven setting文件1234567 nexus-aliyun *,!jeecg,!jeecg-snapshots,!mapr-releases Nexus aliyun http://maven.aliyun.com/nexus/content/groups/public 编译1mvn clean package -DskipTests 项目模块Flink release-1.9 分支，Flink 主要模块： flink-annotations 注解； flink-clients 客户端； flink-connectors Flink 连接器，包括 Kafka、ElasticSearch、Cassandra、HBase、HDFS、Hive、JDBC 等； flink-container 提供对 Docker 和 Flink on Kubernetes 支持； flink-contrib 新模块准备或孵化区域； flink-core Flink 核心代码； flink-dist 提供对分发包支持； flink-filesystems 提供对文件系统的支持，包括 HDFS、S3 等； flink-formats 提供对文件格式的支持，包括 Avro、Parquet、JSON、CSV 等； flink-java Flink 底层 API； flink-libraries 提供对事件处理（Flink CEP）、图处理（Flink Gelly）和状态处理的支持； flink-mesos 提供对 Flink on Mesos 支持； flink-metrics 提供对监控的支持，包括 Graphite、InfluxDB、Prometheus、JMX、SLF4j 等； flink-ml-parent 提供对机器学习的支持； flink-optimizer Flink 优化器； flink-python 提供对 Python 的支持； flink-queryable-state 提供对 Queryable State 支持； flink-quickstart 提供对 Java 和 Scala 工程模板的支持； flink-runtime Flink 运行时； flink-runtime-web Dashboard UI； flink-scala 提供对 Scala 的支持； flink-scala-shell 提供对 Scala Shell 的支持； flink-shaded-curator 提供 Apache Curator 依赖的 shaded 包； flink-state-backends 提供对 RocksDB 状态后端的支持； flink-streaming-java DataStream API； flink-streaming-scala DataStream API 的 Scala 版； flink-table Table API 和 SQL； flink-yarn 提供对 Flink on YARN 支持。 以上模块中，粗体为重点模块，将在之后 Flink 源码分析的博文中详细介绍。 参考 Flink 源码分析（一）：源码环境搭建","permalink":"http://renzehello.github.io/2020/01/16/compile-code/","photos":[]},{"tags":[{"name":"源代码","slug":"源代码","permalink":"http://renzehello.github.io/tags/%E6%BA%90%E4%BB%A3%E7%A0%81/"}],"title":"如何高效的阅读源代码","date":"2020/01/16","text":"如何高效的阅读源代码随着数据工程的发展，应用于不同场景的大数据组件种类层出不穷。对于一种大数据工具或者组件的学习，能够在生产环境下使用，自然是最好的一种学习方式。除此之外，在熟练使用的基础上，对源代码进行阅读，不仅有助于加深当前一种工具的理解，更能帮助大家增加分布式、数据密集系统的知识储备，能够起到触类旁通的效果。 个人谈谈阅读源代码的经验。 第一阶段学习基本使用和基本原理，从应用角度对工具进行了解和学习 这是第一个阶段，首先从学习使用工具开始，从应用层面，对其进行一定了解，比如你可以使用shell-cli或者api进行操作。接下来可以尝试了解它的内部原理，注意，不需要通过阅读源代码了解内部原理，只需看一些博客、书籍，不仅需要知道它的基本架构以及各个模块的功能，而且应该知道其具体的工作流程及工作原理，可以自己在纸上完整画完架构及工作流程，越详细越好。 在这个阶段，建议你多看一些知名博客。如果你有实际项目驱动，那是再好不过了，理论联系实际是最好的学习方法；如果你没有项目驱动，那建议你不要自己一个人闷头学，多跟别人交流，多主动给别人讲讲，最好的学习方式还是“讲给别人听”。 第二阶段从无到入门，开始阅读hadoop源代码 这个阶段是最困苦和漫长的，尤其对于那些没有任何分布式经验的人。 很多人这个阶段没有走完，就放弃了，最后停留在应用层面。 当你把源代码导入eclipse或intellij idea，沏上一杯茶，开始准备优哉游哉地看源代码时，你懵逼了：你展开那数不尽的package和class，觉得无从下手，好不容易找到了入口点，然后你屁颠屁颠地通过eclipse的查找引用功能，顺着类的调用关系一层层找下去，最后迷失在了代码的海洋中，如同你在不尽的压栈，最后栈溢出了，你忘记在最初的位置。很多人经历过上面的过程，最后没有顺利逃出来，而放弃。 如果你正在经历这个过程，我的经验如下： 你需要选择一个稳定的release版本 (可以是最新版本，也可以是任一稳定版本)，在本地将源代码编译打包成功，因为在阅读源代码的过程中，一个随时可以debug的环境，可以使你理解代码的过程更加高效。 其次，需要了解工程的代码模块，知道每一个模块对应的作用，并在阅读源代码过程中，时刻谨记你当前阅读的代码属于哪一个模块，会在哪个组件中执行。之后你需要摸清各个组件的交互协议，也就是分布式中的RPC，你需要对RPC的使用方式有所了解，然后看各模块间的RPC protocol，到此，你把握了系统的骨架，这是接下来阅读源代码的基础； 接着，你要选择一个模块开始阅读，一般选择Client，这个模块相对简单些，会给自己增加信心，为了在阅读代码过程中，不至于迷失自己，建议在纸上画出类的调用关系，边看边画，加深理解。 在这个阶段，建议大家多看一些源代码分析博客和书籍，比如《xxxx术内幕》系列丛书。借助这些博客和书籍，你可以在前人的帮助下，更快地学习源代码，节省大量时间，注意，目前博客和书籍很多，建议大家广泛收集资料，找出最适合自己的参考资料。 这个阶段最终达到的目的，是对源代码整体架构和局部的很多细节，有了一定的了解。以hadoop为例，比如你知道MapReduce Scheduler是怎样实现的，MapReduce shuffle过程中，map端做了哪些事情，reduce端做了哪些事情，是如何实现的，等等。这个阶段完成后，当你遇到问题或者困惑点时，可以迅速地在Hadoop源代码中定位相关的类和具体的函数，通过阅读源代码解决问题，这时候，hadoop源代码变成了你解决问题的参考书。 第三个阶段根据需求，修改源代码。 这个阶段，是验证你阅读源代码成效的时候。你根据leader给你的需求，修改相关代码完成功能模块的开发。在修改源代码过程中，你发现之前阅读源代码仍过于粗糙，这时候你再进一步深入阅读相关代码，弥补第二个阶段中薄弱的部分。当然，很多人不需要经历第三个阶段，仅仅第二阶段就够了：一来能够通过阅读代码解决自己长久以来的技术困惑，满足自己的好奇心，二来从根源上解决解决自己遇到的各种问题。 这个阶段，没有太多的参考书籍或者博客，多跟周围的同事交流，通过代码review和测试，证明自己的正确性。 阅读源代码的目的不一定非是工作的需要，你可以把他看成一种修养，通过阅读源代码，加深自己对分布式系统的理解，培养自己踏实做事的心态。 参考 董的博客","permalink":"http://renzehello.github.io/2020/01/16/how-read-code/","photos":[]},{"tags":[],"title":"page","date":"2020/01/13","text":"","permalink":"http://renzehello.github.io/2020/01/13/page/","photos":[]},{"tags":[{"name":"testTag","slug":"testTag","permalink":"http://renzehello.github.io/tags/testTag/"}],"title":"post","date":"2020/01/13","text":"","permalink":"http://renzehello.github.io/2020/01/13/post/","photos":[]}]}